apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ibm-helm-release-spm
  annotations:
    description: Publishes the helm chart to the helm repository using the version provided in the image-url
    app.openshift.io/description: Publishes the helm chart to the helm repository using the version provided in the image-url
    app.openshift.io/vcs-uri: https://github.com/IBM/ibm-garage-tekton-tasks
    app.openshift.io/vcs-ref: master
  labels:
    version: 0.0.0
spec:
  params:
    - name: git-url
    - name: git-revision
      default: master
    - name: source-dir
      default: /source
    - name: image-url
      default: ""
    - name: app-name
      default: ""
    - name: deploy-ingress-type
      default: "route"
    - name: helm-curl
      default: ""
    - name: tools-image
      default: quay.io/ibmgaragecloud/ibmcloud-dev:v2.0.4
  results:
    - name: helm-url
      description: The url of the helm repository
  volumes:
    - name: source
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - name: source
        mountPath: $(params.source-dir)
  steps:
    - name: git-clone
      image: quay.io/ibmgaragecloud/alpine-git
      env:
        - name: GIT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: git-credentials
              key: password
              optional: true
        - name: GIT_USERNAME
          valueFrom:
            secretKeyRef:
              name: git-credentials
              key: username
              optional: true
      script: |
        set +x
        if [[ -n "${GIT_USERNAME}" ]] && [[ -n "${GIT_PASSWORD}" ]]; then
            git clone "$(echo $(params.git-url) | awk -F '://' '{print $1}')://${GIT_USERNAME}:${GIT_PASSWORD}@$(echo $(params.git-url) | awk -F '://' '{print $2}')" $(params.source-dir)
        else
            set -x
            git clone $(params.git-url) $(params.source-dir)
        fi
        set -x
        cd $(params.source-dir)
        git checkout $(params.git-revision)
    - name: package-helm
      image: $(params.tools-image)
      workingDir: $(params.source-dir)
      env:
        - name: TLS_SECRET_NAME
          valueFrom:
            configMapKeyRef:
              name: ibmcloud-config
              key: TLS_SECRET_NAME
              optional: true
        - name: INGRESS_SUBDOMAIN
          valueFrom:
            configMapKeyRef:
              name: ibmcloud-config
              key: INGRESS_SUBDOMAIN
              optional: true
        - name: ARTIFACTORY_URL
          valueFrom:
            secretKeyRef:
              name: artifactory-access
              key: ARTIFACTORY_URL
              optional: true
        - name: ARTIFACTORY_USER
          valueFrom:
            secretKeyRef:
              name: artifactory-access
              key: ARTIFACTORY_USER
              optional: true
        - name: ARTIFACTORY_ENCRYPT
          valueFrom:
            secretKeyRef:
              name: artifactory-access
              key: ARTIFACTORY_ENCRYPT
              optional: true
        - name: ARTIFACTORY_REPOSITORY_KEY
          valueFrom:
            secretKeyRef:
              name: artifactory-access
              key: ARTIFACTORY_REPOSITORY_KEY
              optional: true
        - name: HELM_URL
          valueFrom:
            secretKeyRef:
              name: helm-access
              key: HELM_URL
              optional: true
        - name: HELM_USER
          valueFrom:
            secretKeyRef:
              name: helm-access
              key: HELM_USER
              optional: true
        - name: HELM_PASSWORD
          valueFrom:
            secretKeyRef:
              name: helm-access
              key: HELM_PASSWORD
              optional: true
      script: |
           #!/usr/bin/env bash

            set -ex
            CURL_FLAGS="$(params.helm-curl)"


           echo "1. Package Helm Chart"


           GIT_URL="$(params.git-url)"

           GIT_REVISION="$(params.git-revision)"


           IMAGE_SERVER="$(echo "$(params.image-url)" | awk -F / '{print $1}')"

           IMAGE_NAMESPACE="$(echo "$(params.image-url)" | awk -F / '{print $2}')"

           IMAGE_REPOSITORY="$(echo "$(params.image-url)" | awk -F / '{print $3}' | awk -F : '{print $1}')"

           IMAGE_VERSION="$(echo "$(params.image-url)" | awk -F / '{print $3}' | awk -F : '{print $2}')"

           IMAGE_URL_batch="${IMAGE_SERVER}/${IMAGE_NAMESPACE}/batch"
           IMAGE_URL_curam="${IMAGE_SERVER}/${IMAGE_NAMESPACE}/curam"
           IMAGE_URL_httpd="${IMAGE_SERVER}/${IMAGE_NAMESPACE}/httpd"
           IMAGE_URL_servercode="${IMAGE_SERVER}/${IMAGE_NAMESPACE}/servercode"
           IMAGE_URL_xmlserver="${IMAGE_SERVER}/${IMAGE_NAMESPACE}/xmlserver"

           CHART_ROOT=$(find . -name helm-charts)

           echo "CHART_ROOT: $CHART_ROOT"
           

           mkdir -p "$(params.source-dir)/chart-temp"

           cp -R "$CHART_ROOT" "$(params.source-dir)/chart-temp/"

           CHART_ROOT="$(params.source-dir)/chart-temp/helm-charts"

           helm repo add sch https://raw.githubusercontent.com/IBM/charts/master/repo/samples

           helm repo update 
           

            echo "2. Publish Helm Chart"


            if [[ -z "${HELM_URL}" ]] && [[ -z "${HELM_USER}" ]]; then
            if [[ -z "${ARTIFACTORY_URL}" ]]; then
            echo "It looks like Artifactory has not been installed (ARTIFACTORY_URL from artifactory-acess secret is missing). Skipping step."
            exit 0
            fi

            set +x
            if [[ -z "${ARTIFACTORY_USER}" ]]; then
            echo "Something's wrong... The Artifactory url is configured but the Artifactory credentials cannot be found. Check your artifactory-access secret."
            exit 1
            fi

            if [[ -z "${ARTIFACTORY_ENCRYPT}" ]]; then
            echo "It looks like your Artifactory installation is not complete. Please complete the steps found here - http://ibm.biz/complete-setup"
            exit 1
            fi

            HELM_USER="${ARTIFACTORY_USER}"
            set +x
            HELM_PASSWORD="${ARTIFACTORY_ENCRYPT}"
            set -x

            if [[ -z "${ARTIFACTORY_REPOSITORY_KEY}" ]]; then
            ARTIFACTORY_REPOSITORY_KEY="generic-local"
            fi
            if [[ -z "${HELM_URL}" ]]; then
            HELM_URL="${ARTIFACTORY_URL}/artifactory/${ARTIFACTORY_REPOSITORY_KEY}"
            fi

            fi
          
            helm repo add ${IMAGE_NAMESPACE}  ${HELM_URL}/${IMAGE_NAMESPACE}
         

            if [[ -d  ${CHART_ROOT}/batch ]]; then
             
                CHART=$(find $CHART_ROOT -name 'Chart*.yaml')
                CHART_NAME=$(cat $CHART | yq r - name)
                helm dep update ${CHART_ROOT}/batch 
                RELEASE_NAME="batch"
                echo $(helm version)
                echo "CHECKING CHART (lint)"
                helm lint ${CHART_ROOT}/batch
                echo "RELEASE_NAME: $RELEASE_NAME"
                helm package --version ${IMAGE_VERSION} ${CHART_ROOT}/batch
                 
                echo "curl ${CURL_FLAGS} -u${HELM_USER}:xxxx -s -T batch-${IMAGE_VERSION}.tgz ${HELM_URL}/${IMAGE_NAMESPACE}/batch-${IMAGE_VERSION}.tgz"

               curl ${CURL_FLAGS} -u${HELM_USER}:${HELM_PASSWORD} -s -T  batch-${IMAGE_VERSION}.tgz "${HELM_URL}/${IMAGE_NAMESPACE}/batch-${IMAGE_VERSION}.tgz"
            fi 
         

            if [[ -d  ${CHART_ROOT}/xmlserver ]]; then
             
                CHART=$(find $CHART_ROOT -name 'Chart*.yaml')
                CHART_NAME=$(cat $CHART | yq r - name)
                RELEASE_NAME="xmlserver"
                helm dep update ${CHART_ROOT}/xmlserver
                echo $(helm version)
                echo "CHECKING CHART (lint)"
                helm lint ${CHART_ROOT}/xmlserver
                echo "RELEASE_NAME: $RELEASE_NAME"
                helm package --version ${IMAGE_VERSION} ${CHART_ROOT}/xmlserver

                echo "curl ${CURL_FLAGS} -u${HELM_USER}:xxxx -s -T xmlserver-${IMAGE_VERSION}.tgz ${HELM_URL}/${IMAGE_NAMESPACE}/xmlserver-${IMAGE_VERSION}.tgz"

               curl ${CURL_FLAGS} -u${HELM_USER}:${HELM_PASSWORD} -s -T xmlserver-${IMAGE_VERSION}.tgz "${HELM_URL}/${IMAGE_NAMESPACE}/xmlserver-${IMAGE_VERSION}.tgz"
            fi 
         
             if [[ -d  ${CHART_ROOT}/mqserver ]]; then
             
                CHART=$(find $CHART_ROOT -name 'Chart*.yaml')
                CHART_NAME=$(cat $CHART | yq r - name)
                RELEASE_NAME="mqserver"
                helm dep update ${CHART_ROOT}/mqserver
                echo $(helm version)
                echo "CHECKING CHART (lint)"
                helm lint ${CHART_ROOT}/mqserver
                echo "RELEASE_NAME: $RELEASE_NAME"
                helm package --version ${IMAGE_VERSION} ${CHART_ROOT}/mqserver

                echo "curl ${CURL_FLAGS} -u${HELM_USER}:xxxx -s -T mqserver-${IMAGE_VERSION}.tgz ${HELM_URL}/${IMAGE_NAMESPACE}/mqserver-${IMAGE_VERSION}.tgz"

                curl ${CURL_FLAGS} -u${HELM_USER}:${HELM_PASSWORD} -s -T mqserver-${IMAGE_VERSION}.tgz "${HELM_URL}/${IMAGE_NAMESPACE}/mqserver-${IMAGE_VERSION}.tgz"
            fi 
          
            if [[ -d  ${CHART_ROOT}/web ]]; then
             
                CHART=$(find $CHART_ROOT -name 'Chart*.yaml')
                CHART_NAME=$(cat $CHART | yq r - name)
                RELEASE_NAME="web"
                helm dep update ${CHART_ROOT}/web
                echo $(helm version)
                echo "CHECKING CHART (lint)"
                helm lint ${CHART_ROOT}/web
                echo "RELEASE_NAME: $RELEASE_NAME"
                helm package --version ${IMAGE_VERSION} ${CHART_ROOT}/web

                echo "curl ${CURL_FLAGS} -u${HELM_USER}:xxxx -s -T web-${IMAGE_VERSION}.tgz ${HELM_URL}/${IMAGE_NAMESPACE}/web-${IMAGE_VERSION}.tgz"

               curl ${CURL_FLAGS} -u${HELM_USER}:${HELM_PASSWORD} -s -T web-${IMAGE_VERSION}.tgz  "${HELM_URL}/${IMAGE_NAMESPACE}/web-${IMAGE_VERSION}.tgz"
            fi 
           

            if [[ -d ${CHART_ROOT}/apps ]]; then
             
                CHART=$(find $CHART_ROOT -name 'Chart*.yaml')
                CHART_NAME=$(cat $CHART | yq r - name)
                helm dep update ${CHART_ROOT}/apps
                echo $(helm version)
                echo "CHECKING CHART (lint)"
                helm lint ${CHART_ROOT}/apps
                # helm template ${CHART_PATH}
                helm package --version ${IMAGE_VERSION} ${CHART_ROOT}/apps
                 
                echo "curl ${CURL_FLAGS} -u${HELM_USER}:xxxx -s -T apps-${IMAGE_VERSION}.tgz ${HELM_URL}/${IMAGE_NAMESPACE}/apps-${IMAGE_VERSION}.tgz"

                curl ${CURL_FLAGS} -u${HELM_USER}:${HELM_PASSWORD} -s -T apps-${IMAGE_VERSION}.tgz "${HELM_URL}/${IMAGE_NAMESPACE}/apps-${IMAGE_VERSION}.tgz"
                
            fi 
         

            # Create index  for all package that depend to spm

            helm repo update 
             set -x


           apiVersion=$(grep apiVersion ./index.yaml | sed -E "s/apiVersion:(.*)/\1/g")

           if [[ $(cat index.yaml | jq '.errors[0].status') != "404" ]] && [[ -n "${apiVersion}" ]]; then
            # Merge the chart index with the current index.yaml held in Artifactory
            echo "Merging Chart into index.yaml for Chart Repository"
            helm repo index . --url ${HELM_URL}/${IMAGE_NAMESPACE} --merge index.yaml
            else
            #Dont Merge this is first time one is being created
            echo "Creating a new index.yaml for Chart Repository"
            # rm index.yaml
            helm repo index . --url ${HELM_URL}/${IMAGE_NAMESPACE}
            fi;
        

              echo "curl ${CURL_FLAGS} -u${HELM_USER}:xxxx -s -T index.yaml ${HELM_URL}/${IMAGE_NAMESPACE}/index.yaml"

              curl ${CURL_FLAGS} -u${HELM_USER}:${HELM_PASSWORD} -s -T index.yaml "${HELM_URL}/${IMAGE_NAMESPACE}/index.yaml"


           
      
              if [[ -d  ${CHART_ROOT}/spm ]]; then
             
                CHART=$(find $CHART_ROOT -name 'Chart*.yaml')
                CHART_NAME=$(cat $CHART | yq r - name) 
                RELEASE_NAME="spm"
                image_version=${IMAGE_VERSION} 
                sed -i "s/replace/$image_version/" ${CHART_ROOT}/spm/Chart.yaml
                helm dependency build ${CHART_ROOT}/spm
                echo $(helm version)
                echo "CHECKING CHART (lint)"
                helm lint ${CHART_ROOT}/spm
                echo "RELEASE_NAME: $RELEASE_NAME"
                helm repo update 
                helm search repo jules-project 
                helm package --version ${IMAGE_VERSION} ${CHART_ROOT}/spm
               
               echo "curl ${CURL_FLAGS} -u${HELM_USER}:xxxx -s -T spm-${IMAGE_VERSION}.tgz ${HELM_URL}/${IMAGE_NAMESPACE}/spm-${IMAGE_VERSION}.tgz"

                curl ${CURL_FLAGS} -u${HELM_USER}:${HELM_PASSWORD} -s -T spm-${IMAGE_VERSION}.tgz "${HELM_URL}/${IMAGE_NAMESPACE}/spm-${IMAGE_VERSION}.tgz"
          
               fi 
            # Get the index and re index it with current Helm Chart

              set +x

              echo "curl ${CURL_FLAGS} -u${HELM_USER}:xxxx -O ${HELM_URL}/${IMAGE_NAMESPACE}/index.yaml"

              curl ${CURL_FLAGS} -u${HELM_USER}:${HELM_PASSWORD} -O "${HELM_URL}/${IMAGE_NAMESPACE}/index.yaml"

            set -x


            apiVersion=$(grep apiVersion ./index.yaml | sed -E "s/apiVersion: (.*)/\1/g")

           if [[ $(cat index.yaml | jq '.errors[0].status') != "404" ]] && [[ -n "${apiVersion}" ]]; then
            # Merge the chart index with the current index.yaml held in Artifactory
            echo "Merging Chart into index.yaml for Chart Repository"
            helm repo index . --url ${HELM_URL}/${IMAGE_NAMESPACE} --merge index.yaml
           else
            # Dont Merge this is first time one is being created
            echo "Creating a new index.yaml for Chart Repository"
            rm index.yaml
            helm repo index . --url ${HELM_URL}/${IMAGE_NAMESPACE}
            fi;

           set +x

            echo "curl ${CURL_FLAGS} -u${HELM_USER}:xxxx -s -T spm-${IMAGE_VERSION}.tgz ${HELM_URL}/${IMAGE_NAMESPACE}/spm-${IMAGE_VERSION}.tgz"

             curl ${CURL_FLAGS} -u${HELM_USER}:${HELM_PASSWORD} -s -T spm-${IMAGE_VERSION}.tgz  "${HELM_URL}/${IMAGE_NAMESPACE}/spm-${IMAGE_VERSION}.tgz"


            echo "curl ${CURL_FLAGS} -u${HELM_USER}:xxxx -s -T index.yaml ${HELM_URL}/${IMAGE_NAMESPACE}/index.yaml"

            curl ${CURL_FLAGS} -u${HELM_USER}:${HELM_PASSWORD} -s -T index.yaml "${HELM_URL}/${IMAGE_NAMESPACE}/index.yaml"


            echo -n "${HELM_URL}/${IMAGE_NAMESPACE}" | tee $(results.helm-url.path)



         